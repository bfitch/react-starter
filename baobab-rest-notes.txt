(1) library wide config
(2) per cursor config
(3) per method call config

Return:

.then((cursor, response) => {
  if (response.ok) {
    // do something
  else {
    // do something else
  }
});

or 
.catch((exception) => {
  // log exception;
})

// implicit id
// save(cursor, data, options)

//if `identifier` is in `data` => PUT
//else POST

options =  {
  resource: "cool_todos",
  prefix: "vendor",
  host: "http://bob.com",
  url: "http://cool.com/cool-todos"
  identifier: "guid",
  loadingIndicator: true,
  setErrors: true
};

save("todos", {  // => PUT
  id: 1
  title: "foo",
  completed: false
  }, {
    resource: "todonots"
});

save("todos", {  // => POST
  title: "foo",
  completed: false
  }, {
    url: "http://todonots.com"
});

// explicit id
// save(cursor, identifier, data, options)

save("todos", 1, data)

// explicit
destroy("todos", 2, options)

//implicit
destroy("todos", data, options)

fetch("todos", options)

{
  todos: {
    data: [],
    isLoading: {
      fetch: false,
      save: false,
      destroy: false
    },
    validationErrors: {
      title: "must not be blank"
    },
    responseErrors: []
  }
}

baobab-rest lets you:

(1) Syncronize Baobab data with REST resources
(2) Set loading/loaded states for each resource
(3) Perform and set client validations and rollbacks
(4) Set server validations and expose them to views
(5) Set any exceptions or errors
